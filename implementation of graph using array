#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int numVertices;
    int **adjMatrix;
} Graph;

Graph* createGraph(int numVertices) {
    Graph* graph = (Graph*) malloc(sizeof(Graph));
    if (!graph) {
        perror("Failed to allocate memory for graph");
        exit(EXIT_FAILURE);
    }
    graph->numVertices = numVertices;
    graph->adjMatrix = (int*) calloc(numVertices, sizeof(int));
    if (!graph->adjMatrix) {
        perror("Failed to allocate memory for adjacency matrix");
        free(graph);
        exit(EXIT_FAILURE);
    }
    for (int i = 0; i < numVertices; i++) {
        graph->adjMatrix[i] = (int*) calloc(numVertices, sizeof(int));
        if (!graph->adjMatrix[i]) {
            perror("Failed to allocate memory for adjacency row");
            freeGraph(graph);
            exit(EXIT_FAILURE);
        }
    }
    return graph;
}

void addEdge(Graph* graph, int i, int j, int semantics) {
    graph->adjMatrix[i][j] = semantics;
    graph->adjMatrix[j][i] = semantics;
}

void printGraph(Graph* graph) {
    printf("Adjacency Matrix:\n");
    for (int i = 0; i < graph->numVertices; i++) {
        for (int j = 0; j < graph->numVertices; j++) {
            printf("%d ", graph->adjMatrix[i][j]);
        }
        printf("\n");
    }
}

void freeGraph(Graph* graph) {
    for (int i = 0; i < graph->numVertices; i++) {
        free(graph->adjMatrix[i]);
    }
    free(graph->adjMatrix);
    free(graph);
}

int main() {
    int numVertices;
    printf("Enter number of vertices (max 3): ");
    scanf("%d", &numVertices);

    if (numVertices < 1 || numVertices > 3) {
        printf("Error: Number of vertices must be between 1 and 3.\n");
        return 1;
    }

    Graph* graph = createGraph(numVertices);

    for (int i = 0; i < numVertices; i++) {
        for (int j = i + 1; j < numVertices; j++) { // Only ask for half the edges
            int semantics;
            printf("Enter semantics for edge (%d, %d) (0/1): ", i, j);
            scanf("%d", &semantics);
            while (semantics != 0 && semantics != 1) { // Validate semantics input
                printf("Invalid input. Enter semantics for edge (%d, %d) (0/1): ", i, j);
                scanf("%d", &semantics);
            }
            addEdge(graph, i, j, semantics);
        }
    }

    printGraph(graph);
    freeGraph(graph);
    return 0;
}
